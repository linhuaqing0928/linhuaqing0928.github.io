<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>林华清</title>
    <link>http://linhuaqing0928.github.io/</link>
    <description>Recent content on 林华清</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 07 Jul 2021 20:34:54 +0800</lastBuildDate><atom:link href="http://linhuaqing0928.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARTS6</title>
      <link>http://linhuaqing0928.github.io/post/arts6/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:54 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts6/</guid>
      <description>Algorithm 剑指 Offer 03. 数组中重复的数字 最容易想到的解法就是map不重复算法
// map不可重复解法 func findRepeatNumber(nums []int) int { unrepeat_map := make(map[int]int) for _, num := range nums { if _, ok := unrepeat_map[num]; ok { return num } else { unrepeat_map[num] = 1 } } return -1 } 看评论区有一个原地交换算法，很精妙。充分利用了长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内这一条件，实现如下：
// 原地交换算法 func findRepeatNumber1(nums []int) int { index := 0 for index &amp;lt; len(nums) { if index == nums[index] { index++ continue } if nums[nums[index]] == nums[index] { return nums[index] } temp := nums[nums[index]] nums[nums[index]] = nums[index] nums[index] = temp } return -1 } Review The Wide World of Software Testing 文章从上到下介绍了测试金字塔的几个阶段，都是一些概念。很赞同里面对单元测试的几个定义：</description>
    </item>
    
    <item>
      <title>ARTS #5</title>
      <link>http://linhuaqing0928.github.io/post/arts5/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:51 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts5/</guid>
      <description>Algorithm 剑指 Offer 09. 用两个栈实现队列
看了官方解答之后才做出来的。栈A存push的内容，栈B存remove的内容。栈B空的时候，把栈A的内容一一remove出来，然后再一一push到栈B里面。
type CQueue struct { stack1, stack2 *list.List } func Constructor() CQueue { return CQueue{ list.New(), list.New(), } } func (this *CQueue) AppendTail(value int) { this.stack1.PushBack(value) } func (this *CQueue) DeleteHead() int { if this.stack2.Len() &amp;gt; 0 { back := this.stack2.Back() element := this.stack2.Remove(back) return element.(int) } index := 0 for index &amp;lt; this.stack1.Len() { back := this.stack1.Back() element := this.stack1.Remove(back) this.stack2.PushBack(element) } if this.stack2.Len() == 0 { return -1 } back := this.</description>
    </item>
    
    <item>
      <title>ARTS #4</title>
      <link>http://linhuaqing0928.github.io/post/arts4/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:48 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts4/</guid>
      <description>Algorithm 剑指 Offer 10- I. 斐波那契数列 key：动态规划、python不用考虑int范围
class Solution(object): def fib(self, n): &amp;quot;&amp;quot;&amp;quot; :type n: int :rtype: int &amp;quot;&amp;quot;&amp;quot; if n == 0: return 0 if n == 1: return 1 pre1 = 0 pre2 = 1 index = 2 while index &amp;lt;= n: pre1 , pre2 = pre2, pre1 + pre2 index = index + 1 return pre2 % 1000000007 Review SOLID Go Design 这篇文章讲了solid原则在go上一些最佳实践的点，主要内容如下：
 单一原则： 在go程序要做到：每个 Go package 本身就是一个小的 Go 程序，一个单一的变更单元，具有单一的责任。从package的命名、实现的内容都要做到单一功能。  这里特意提到了unix的设计理念：small, sharp tools which combine to solve larger tasks, oftentimes tasks which were not envisioned by the original authors   开闭原则：也就是Software entities should be open for extension, but closed for modification。go本身不支持函数重载。很好的做到了being open for extension, are closed for modification 里式替换原则：go本身没有抽象类的概念，但是interface很好的支持了替换原则。 接口隔离原则：Clients should not be forced to depend on methods they do not use。 在go里面的最佳实践：A great rule of thumb for Go is accept interfaces, return structs.</description>
    </item>
    
    <item>
      <title>ARTS #3</title>
      <link>http://linhuaqing0928.github.io/post/arts3/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:44 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts3/</guid>
      <description>Algorithm 剑指 Offer 04. 二维数组中的查找 这道题是看了官方解法才解出来的，我个人的解题思路考虑了以下几个场景：
 暴力解法，发现会超时 暴力接法的基础上想到了二分法提供性能，但是想到这个题目的侧重点应该不是二分法，所以就没有正式动手。 联想到数组是有序的，所以开始考虑从左上角出发进行寻找，但是左上角需要考虑回退和绕圈的场景，比较复杂一直没有做出来。 暴力递归解法：  class Solution(object): def findNumberIn2DArray(self, matrix, target): &amp;quot;&amp;quot;&amp;quot; :type matrix: List[List[int]] :type target: int :rtype: bool &amp;quot;&amp;quot;&amp;quot; for row in matrix: for column in row: if column==target: return True return False 线性查找：
class Solution(object): def findNumberIn2DArray(self, matrix, target): &amp;quot;&amp;quot;&amp;quot; :type matrix: List[List[int]] :type target: int :rtype: bool &amp;quot;&amp;quot;&amp;quot; row_nums = len(matrix) if row_nums == 0: return False column_nums = len(matrix[0]) if column_nums ==0: return False current_column = column_nums-1 current_row = 0 while True: if current_column &amp;lt; 0 or current_row &amp;gt;= row_nums: return False current_value = matrix[current_row][current_column] if current_value == target: return True if current_value &amp;lt; target: current_row += 1 continue if current_value &amp;gt; target: current_column -= 1 continue Review FIT: Failure Injection Testing 文章介绍了netflix的FIT（故障注入测试），大概内容如下：</description>
    </item>
    
    <item>
      <title>ARTS #2</title>
      <link>http://linhuaqing0928.github.io/post/arts2/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:39 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts2/</guid>
      <description>Algorithm 83. 删除排序链表中的重复元素 非常简单的单向链表遍历
# Definition for singly-linked list. # class ListNode(object): # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution(object): def deleteDuplicates(self, head): &amp;quot;&amp;quot;&amp;quot; :type head: ListNode :rtype: ListNode &amp;quot;&amp;quot;&amp;quot; if head is None: return head start = head current_node = head next_node = None while current_node.next: next_node = current_node.next if current_node.val != next_node.val: current_node = next_node if current_node.val == next_node.val: if next_node.next: current_node.</description>
    </item>
    
    <item>
      <title>ARTS #1</title>
      <link>http://linhuaqing0928.github.io/post/arts1/</link>
      <pubDate>Wed, 07 Jul 2021 20:25:15 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts1/</guid>
      <description>Algorithm 35. 搜索插入位置 暴力解法：
class Solution(object): def searchInsert(self, nums, target): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :type target: int :rtype: int &amp;quot;&amp;quot;&amp;quot; for i in range(len(nums)): if target == nums[i]: return i if target &amp;lt; nums[i]: return i return len(nums) 自己写的丑陋二分法：
class Solution(object): def searchInsert(self, nums, target): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :type target: int :rtype: int &amp;quot;&amp;quot;&amp;quot; result = self.dichotomy(0, len(nums)-1, nums, target) return result def dichotomy(self, start, end, nums, target): if nums[start] == target: return start if nums[end] == target: return end if start == (end-1) or start == end: if nums[start] &amp;gt; target: return start if nums[end] &amp;lt; target: return end + 1 else: return end middle = int((start + end)/2) if nums[middle] == target: return middle if nums[middle] &amp;lt; target: return self.</description>
    </item>
    
  </channel>
</rss>
