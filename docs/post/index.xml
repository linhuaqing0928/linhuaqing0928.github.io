<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 林华清</title>
    <link>http://linhuaqing0928.github.io/post/</link>
    <description>Recent content in Posts on 林华清</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 21 Sep 2021 08:33:09 +0800</lastBuildDate><atom:link href="http://linhuaqing0928.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ARTS15</title>
      <link>http://linhuaqing0928.github.io/post/arts15/</link>
      <pubDate>Tue, 21 Sep 2021 08:33:09 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts15/</guid>
      <description>Algorithm 剑指 Offer 12. 矩阵中的路径 自己用stack的方式解法，思路和官方是一样的，但是一直不能ac，后面留时间再debug下。 贴一下Golang实现的官方解题：
func exist(board [][]byte, word string) bool { row := 0 for row &amp;lt; len(board) { column := 0 for column &amp;lt; len(board[0]) { if dfs(row, column, 0, &amp;amp;board, word) { return true } column++ } row++ } return false } func dfs(i int, j int, k int, board *[][]byte, word string) bool { if !(0 &amp;lt;= i &amp;amp;&amp;amp; i &amp;lt; len(*board)) || !(0 &amp;lt;= j &amp;amp;&amp;amp; j &amp;lt; len((*board)[0])) || ((*board)[i][j] !</description>
    </item>
    
    <item>
      <title>ARTS14</title>
      <link>http://linhuaqing0928.github.io/post/arts14/</link>
      <pubDate>Sun, 05 Sep 2021 17:45:58 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts14/</guid>
      <description>Algorithm 剑指 Offer 21. 调整数组顺序使奇数位于偶数前面 2个解法：
 头尾双指针   2个指针分别从头尾出发 判断头指针所在位置的值是奇数还是偶数 如果是奇数，则头指针++然后continue 如果是偶数，则交换头尾指针所在位置数组的数值。然后尾指针&amp;ndash;，continue。  快慢双指针   2个指针一起从头部出发 判断快指针所在位置的值是奇数还是偶数 如果是奇数，则交换快慢指针所在位置数组的数值，然后快慢指针都++，continue。 如果是偶数，则快指针++ 然后continue  // 首位双指针 func exchange1(nums []int) []int { start := 0 end := len(nums) - 1 for start &amp;lt; end { if nums[start]%2 == 1 { start++ continue } if nums[start]%2 == 0 { temp := nums[start] nums[start] = nums[end] nums[end] = temp end-- continue } } return nums } // 快慢双指针 func exchange(nums []int) []int { slow := 0 fast := 0 for fast &amp;lt; len(nums) { if nums[fast]%2 == 1 { temp := nums[fast] nums[fast] = nums[slow] nums[slow] = temp fast++ slow++ continue } if nums[fast]%2 == 0 { fast++ continue } } return nums } Review Provider Pattern in Go and Why You Should Use It 文章讲述了provider模式的好处：</description>
    </item>
    
    <item>
      <title>ARTS13</title>
      <link>http://linhuaqing0928.github.io/post/arts13/</link>
      <pubDate>Sun, 29 Aug 2021 16:13:34 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts13/</guid>
      <description>Algorithm 剑指 Offer 10- II. 青蛙跳台阶问题 简单动态规划题目，注意边界值和取模即可
func numWays(n int) int { if n &amp;lt; 2 { return 1 } result := make([]int, n+1) result[0] = 1 result[1] = 1 index := 2 for index &amp;lt;= n { result[index] = result[index-1] + result[index-2] result[index] = result[index] % 1000000007 index++ } return result[n] } Review Go: Understand the Empty Interface 文章介绍了Golang的interface{}的底层实现：
 Golang的runtime源码中，有一个专门的emptyInterface的结构体来表示interface{}。其实就是2个指针：一个代表这个interface的内置type，另一个则是存具体数据内容的指针。前者里面存了内置type具体的size、kind等内容。  type emptyInterface struct { typ *rtype // word 1 with type description word unsafe.</description>
    </item>
    
    <item>
      <title>ARTS12</title>
      <link>http://linhuaqing0928.github.io/post/arts12/</link>
      <pubDate>Sun, 22 Aug 2021 22:35:07 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts12/</guid>
      <description>Algorithm 剑指 Offer 11. 旋转数组的最小数字  解法1：暴力破解法，从前往后遍历，如果index+1比index小就return 解法2：二分法。关键点就是数组本身是一个旋转数组，也就是半递增数组。所以以中间一个最小值点为边界，最小值左右侧都是递增的。通过拿mid点和最右侧点进行对比：   如果mid比right小，说明最小值不在右侧。 如果mid比right大，说明最小值不在左侧。 如果mid和right一样大小，说明存在重复元素。由于我们不知道重复元素有多少个，所以我们right&amp;ndash;即可。  // 暴力遍历，时间复杂度O(n) func minArray1(numbers []int) int { length := len(numbers) index := 0 for index &amp;lt; length-1 { if numbers[index] &amp;gt; numbers[index+1] { return numbers[index+1] } index++ } return numbers[0] } // 二分法，时间复杂度O(logn) // 关键在于 func minArray(numbers []int) int { left := 0 right := len(numbers) - 1 for left &amp;lt; right { mid := left + (right-left)/2 if numbers[mid] &amp;lt; numbers[right] { right = mid continue } if numbers[mid] &amp;gt; numbers[right] { left = mid + 1 continue } if numbers[mid] == numbers[right] { right-- continue } } return numbers[left] } Review Go Pointers: Why I Use Interfaces (in Go) 文章举了一个在Golang中使用interface的例子，来安利我们“面向interface编程“。</description>
    </item>
    
    <item>
      <title>ARTS11</title>
      <link>http://linhuaqing0928.github.io/post/arts11/</link>
      <pubDate>Mon, 16 Aug 2021 01:36:24 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts11/</guid>
      <description>Algorithm 本周听同组同学新人串讲，提到了计算表达式相关知识点，所以上leetcode找出题目，复习写了下。
224. 基本计算器 func calculate(s string) int { s = strings.ReplaceAll(s, &amp;quot; &amp;quot;, &amp;quot;&amp;quot;) var result int intStack := list.New() intStack.PushBack(0) oprateStack := list.New() start := 0 end := start + 1 for end &amp;lt;= len(s) { if s[start:end] == &amp;quot;(&amp;quot; { oprateStack.PushBack(&amp;quot;(&amp;quot;) start = end end = start + 1 continue } if s[start:end] == &amp;quot;-&amp;quot; || s[start:end] == &amp;quot;+&amp;quot; { if start &amp;gt; 0 &amp;amp;&amp;amp; (s[start-1:start] == &amp;quot;-&amp;quot; || s[start-1:start] == &amp;quot;+&amp;quot; || s[start-1:start] == &amp;quot;(&amp;quot;) { intStack.</description>
    </item>
    
    <item>
      <title>ARTS10</title>
      <link>http://linhuaqing0928.github.io/post/arts10/</link>
      <pubDate>Sun, 08 Aug 2021 22:49:27 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts10/</guid>
      <description>Algorithm 剑指 Offer 27. 二叉树的镜像 比较简单的二叉树题目，分别使用递归和栈实现了下
import &amp;quot;container/list&amp;quot; // Definition for a binary tree node. type TreeNode struct { Val int Left *TreeNode Right *TreeNode } // 递归算法 func mirrorTree(root *TreeNode) *TreeNode { if root == nil { return nil } if root.Left == nil &amp;amp;&amp;amp; root.Right == nil { return root } temp := root.Left root.Left = root.Right root.Right = temp if root.Right != nil { mirrorTree(root.Right) } if root.</description>
    </item>
    
    <item>
      <title>ARTS9</title>
      <link>http://linhuaqing0928.github.io/post/arts9/</link>
      <pubDate>Sun, 01 Aug 2021 22:02:59 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts9/</guid>
      <description>Algorithm 剑指 Offer 25. 合并两个排序的链表 解法1：起一个新的链表。然后双指针遍历2个链表，不断地new新的ListNode，并添加到新的链表中。 解法2：三指针解法。将2个链表合并为一个结果链表。
 指针A指向合并后的链表的当前位置。 另外2个指针B、C指向未合并前的2个链表的Next节点位置。当其中一个指针达到尾部之后，将指针A的Next指向另一个指针即可。  package merge_two_lists //Definition for singly-linked list. type ListNode struct { Val int Next *ListNode } func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { if l1 == nil &amp;amp;&amp;amp; l2 == nil { return nil } if l1 == nil { return l2 } if l2 == nil { return l1 } var result, current *ListNode if l1.Val &amp;lt;= l2.Val { current = l1 l1 = l1.</description>
    </item>
    
    <item>
      <title>Golang单元测试实战二：依赖注入与面向接口改造</title>
      <link>http://linhuaqing0928.github.io/post/golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E4%BA%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E4%B8%8E%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E6%94%B9%E9%80%A0/</link>
      <pubDate>Sun, 01 Aug 2021 22:01:24 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E4%BA%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E4%B8%8E%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E6%94%B9%E9%80%A0/</guid>
      <description>单元测试  Unit tests should be pretty lightweight and run fast since they don’t depend on anything external to the unit of code being tested The only way they can fail is by changing the unit of code they are testing  过程 待单元测试代码：
func (f FileSDK) NewFile() string { myClient := ThridPClient{} _, err := myClient.GetRemoteFile() // do something if err.Error() == &amp;quot;error1&amp;quot; { return &amp;quot;default1.txt&amp;quot; } if err.Error() == &amp;quot;error2&amp;quot; { return &amp;quot;default2.</description>
    </item>
    
    <item>
      <title>ARTS8</title>
      <link>http://linhuaqing0928.github.io/post/arts8/</link>
      <pubDate>Sun, 25 Jul 2021 22:23:16 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts8/</guid>
      <description>Algorithm 剑指 Offer 07. 重建二叉树 这道题没有做出来，看了官方解答之后用Golang写一遍 递归法：
type TreeNode struct { Val int Left *TreeNode Right *TreeNode } func buildTree(preorder []int, inorder []int) *TreeNode { // 遍历中序数组并将数据放到map中，方便后续读取数据 index := 0 treeMap := make(map[int]int) for ; index &amp;lt; len(inorder); index++ { treeMap[inorder[index]] = index } head := buildTreeWithIndex(0, len(preorder)-1, 0, len(preorder)-1, preorder, inorder, treeMap) return head } func buildTreeWithIndex(preorderLeft, preorderRight, inorderLeft, inorderRight int, preorder []int, inorder []int, treeMap map[int]int) *TreeNode { if preorderLeft &amp;gt; preorderRight { return nil } preorderRoot := preorderLeft inorderRoot := treeMap[preorder[preorderRoot]] inorderLeftSize := inorderRoot - inorderLeft head := &amp;amp;TreeNode{preorder[preorderRoot], nil, nil} head.</description>
    </item>
    
    <item>
      <title>ARTS7</title>
      <link>http://linhuaqing0928.github.io/post/arts7/</link>
      <pubDate>Sun, 18 Jul 2021 15:48:06 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts7/</guid>
      <description>Algorithm 剑指 Offer 06. 从尾到头打印链表 简单的反转单向链表，之前面试字节的时候遇到过，结果当时没做出来。。 这里比官方解法少一点时间复杂度。
package reverse_print // Definition for singly-linked list. type ListNode struct { Val int Next *ListNode } func reversePrint(head *ListNode) []int { if head == nil { return nil } var next *ListNode var prev *ListNode for true { if head.Next != nil { next = head.Next head.Next = prev prev = head head = next continue } head.Next = prev break } var result []int for true { result = append(result, head.</description>
    </item>
    
    <item>
      <title>Golang单元测试实战：httpMock</title>
      <link>http://linhuaqing0928.github.io/post/golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E4%B8%80httpmock/</link>
      <pubDate>Fri, 16 Jul 2021 17:48:07 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/golang%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E4%B8%80httpmock/</guid>
      <description>单元测试定义 之前看过一篇文章，里面讲到单元测试的2个原则：
 Unit tests should be pretty lightweight and run fast since they don’t depend on anything external to the unit of code being tested The only way they can fail is by changing the unit of code they are testing  记录一下最近对自己的代码进行单元测试实践
过程 被测代码 package http_request_demo import ( &amp;quot;errors&amp;quot; &amp;quot;io/ioutil&amp;quot; &amp;quot;net/http&amp;quot; ) func getAPIResponse(url string) (string, error) { var err error request, err := http.NewRequest(&amp;quot;GET&amp;quot;, url, nil) if err !</description>
    </item>
    
    <item>
      <title>ARTS6</title>
      <link>http://linhuaqing0928.github.io/post/arts6/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:54 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts6/</guid>
      <description>Algorithm 剑指 Offer 03. 数组中重复的数字 最容易想到的解法就是map不重复算法
// map不可重复解法 func findRepeatNumber(nums []int) int { unrepeat_map := make(map[int]int) for _, num := range nums { if _, ok := unrepeat_map[num]; ok { return num } else { unrepeat_map[num] = 1 } } return -1 } 看评论区有一个原地交换算法，很精妙。充分利用了长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内这一条件，实现如下：
// 原地交换算法 func findRepeatNumber1(nums []int) int { index := 0 for index &amp;lt; len(nums) { if index == nums[index] { index++ continue } if nums[nums[index]] == nums[index] { return nums[index] } temp := nums[nums[index]] nums[nums[index]] = nums[index] nums[index] = temp } return -1 } Review The Wide World of Software Testing 文章从上到下介绍了测试金字塔的几个阶段，都是一些概念。很赞同里面对单元测试的几个定义：</description>
    </item>
    
    <item>
      <title>ARTS #5</title>
      <link>http://linhuaqing0928.github.io/post/arts5/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:51 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts5/</guid>
      <description>Algorithm 剑指 Offer 09. 用两个栈实现队列
看了官方解答之后才做出来的。栈A存push的内容，栈B存remove的内容。栈B空的时候，把栈A的内容一一remove出来，然后再一一push到栈B里面。
type CQueue struct { stack1, stack2 *list.List } func Constructor() CQueue { return CQueue{ list.New(), list.New(), } } func (this *CQueue) AppendTail(value int) { this.stack1.PushBack(value) } func (this *CQueue) DeleteHead() int { if this.stack2.Len() &amp;gt; 0 { back := this.stack2.Back() element := this.stack2.Remove(back) return element.(int) } index := 0 for index &amp;lt; this.stack1.Len() { back := this.stack1.Back() element := this.stack1.Remove(back) this.stack2.PushBack(element) } if this.stack2.Len() == 0 { return -1 } back := this.</description>
    </item>
    
    <item>
      <title>ARTS #4</title>
      <link>http://linhuaqing0928.github.io/post/arts4/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:48 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts4/</guid>
      <description>Algorithm 剑指 Offer 10- I. 斐波那契数列 key：动态规划、python不用考虑int范围
class Solution(object): def fib(self, n): &amp;quot;&amp;quot;&amp;quot; :type n: int :rtype: int &amp;quot;&amp;quot;&amp;quot; if n == 0: return 0 if n == 1: return 1 pre1 = 0 pre2 = 1 index = 2 while index &amp;lt;= n: pre1 , pre2 = pre2, pre1 + pre2 index = index + 1 return pre2 % 1000000007 Review SOLID Go Design 这篇文章讲了solid原则在go上一些最佳实践的点，主要内容如下：
 单一原则： 在go程序要做到：每个 Go package 本身就是一个小的 Go 程序，一个单一的变更单元，具有单一的责任。从package的命名、实现的内容都要做到单一功能。  这里特意提到了unix的设计理念：small, sharp tools which combine to solve larger tasks, oftentimes tasks which were not envisioned by the original authors   开闭原则：也就是Software entities should be open for extension, but closed for modification。go本身不支持函数重载。很好的做到了being open for extension, are closed for modification 里式替换原则：go本身没有抽象类的概念，但是interface很好的支持了替换原则。 接口隔离原则：Clients should not be forced to depend on methods they do not use。 在go里面的最佳实践：A great rule of thumb for Go is accept interfaces, return structs.</description>
    </item>
    
    <item>
      <title>ARTS #3</title>
      <link>http://linhuaqing0928.github.io/post/arts3/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:44 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts3/</guid>
      <description>Algorithm 剑指 Offer 04. 二维数组中的查找 这道题是看了官方解法才解出来的，我个人的解题思路考虑了以下几个场景：
 暴力解法，发现会超时 暴力接法的基础上想到了二分法提供性能，但是想到这个题目的侧重点应该不是二分法，所以就没有正式动手。 联想到数组是有序的，所以开始考虑从左上角出发进行寻找，但是左上角需要考虑回退和绕圈的场景，比较复杂一直没有做出来。 暴力递归解法：  class Solution(object): def findNumberIn2DArray(self, matrix, target): &amp;quot;&amp;quot;&amp;quot; :type matrix: List[List[int]] :type target: int :rtype: bool &amp;quot;&amp;quot;&amp;quot; for row in matrix: for column in row: if column==target: return True return False 线性查找：
class Solution(object): def findNumberIn2DArray(self, matrix, target): &amp;quot;&amp;quot;&amp;quot; :type matrix: List[List[int]] :type target: int :rtype: bool &amp;quot;&amp;quot;&amp;quot; row_nums = len(matrix) if row_nums == 0: return False column_nums = len(matrix[0]) if column_nums ==0: return False current_column = column_nums-1 current_row = 0 while True: if current_column &amp;lt; 0 or current_row &amp;gt;= row_nums: return False current_value = matrix[current_row][current_column] if current_value == target: return True if current_value &amp;lt; target: current_row += 1 continue if current_value &amp;gt; target: current_column -= 1 continue Review FIT: Failure Injection Testing 文章介绍了netflix的FIT（故障注入测试），大概内容如下：</description>
    </item>
    
    <item>
      <title>ARTS #2</title>
      <link>http://linhuaqing0928.github.io/post/arts2/</link>
      <pubDate>Wed, 07 Jul 2021 20:34:39 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts2/</guid>
      <description>Algorithm 83. 删除排序链表中的重复元素 非常简单的单向链表遍历
# Definition for singly-linked list. # class ListNode(object): # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution(object): def deleteDuplicates(self, head): &amp;quot;&amp;quot;&amp;quot; :type head: ListNode :rtype: ListNode &amp;quot;&amp;quot;&amp;quot; if head is None: return head start = head current_node = head next_node = None while current_node.next: next_node = current_node.next if current_node.val != next_node.val: current_node = next_node if current_node.val == next_node.val: if next_node.next: current_node.</description>
    </item>
    
    <item>
      <title>ARTS #1</title>
      <link>http://linhuaqing0928.github.io/post/arts1/</link>
      <pubDate>Wed, 07 Jul 2021 20:25:15 +0800</pubDate>
      
      <guid>http://linhuaqing0928.github.io/post/arts1/</guid>
      <description>Algorithm 35. 搜索插入位置 暴力解法：
class Solution(object): def searchInsert(self, nums, target): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :type target: int :rtype: int &amp;quot;&amp;quot;&amp;quot; for i in range(len(nums)): if target == nums[i]: return i if target &amp;lt; nums[i]: return i return len(nums) 自己写的丑陋二分法：
class Solution(object): def searchInsert(self, nums, target): &amp;quot;&amp;quot;&amp;quot; :type nums: List[int] :type target: int :rtype: int &amp;quot;&amp;quot;&amp;quot; result = self.dichotomy(0, len(nums)-1, nums, target) return result def dichotomy(self, start, end, nums, target): if nums[start] == target: return start if nums[end] == target: return end if start == (end-1) or start == end: if nums[start] &amp;gt; target: return start if nums[end] &amp;lt; target: return end + 1 else: return end middle = int((start + end)/2) if nums[middle] == target: return middle if nums[middle] &amp;lt; target: return self.</description>
    </item>
    
  </channel>
</rss>
